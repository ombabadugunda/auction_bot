# -*- coding: utf-8 -*-

import config
import telebot
from telebot import types, TeleBot
import pyrebase
import time
import datetime


configFirebase = {
    "apiKey": "AIzaSyCSO1622ymqxT1S3VzgOzT5pFM8UTyBrTs",
    "authDomain": "auction-bot-56f9c.firebaseapp.com",
    "databaseURL": "https://auction-bot-56f9c-default-rtdb.europe-west1.firebasedatabase.app",
    "storageBucket": "auction-bot-56f9c.appspot.com"
}

firebase = pyrebase.initialize_app(configFirebase)
db = firebase.database()
bot: TeleBot = telebot.TeleBot(config.token)


def getAuctions():
    try:
        auctions = db.child('auctions').get()
        all_auctions = list(auctions.val().keys())
        active_auctions = []
        for a in all_auctions:
            if db.child('auctions').child(a).child('active').get().val() == 1:
                active_auctions.append(a)
        return active_auctions
    except:
        return ['–ù–µ–º–∞—î –ø–æ—Ç–æ—á–Ω–∏—Ö –∞—É–∫—Ü—ñ–æ–Ω—ñ–≤']


def getWorks(auction):
    try:
        work = db.child("auctions").child(auction).child('art').get()
        return list(work.val().keys())
    except:
        return ['–ù–µ–º–∞—î —Ä–æ–±—ñ—Ç']

def finish_auction(message, auction):
    db.child('auctions').child(auction).child('active').set(0)

def get_auction_by_name(name):
    auctions = db.child("auctions").get()
    auctions_dict = dict(auctions.val())
    for auction in auctions_dict:
        if auctions_dict[auction]['name'] == name:
            return auction


@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.chat.id, '–í—ñ—Ç–∞—é —Ç–µ–±–µ! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø—Ä–∏–¥–±–∞—Ç–∏ —Ç—Ä–æ—Ö–∏ –º–∏—Å—Ç–µ—Ü—Ç–≤–∞. '
                                      '–ó–∞—Ä–∞–∑ —Ç–∏ –º–æ–∂–µ—à –≤–∑—è—Ç–∏ —É—á–∞—Ç—å –≤ —Ç–∞–∫–∏—Ö –∞—É–∫—Ü—ñ–æ–Ω–∞—Ö:')
    buttons = []
    buttons.extend(getAuctions())
    try:
        buttons.remove('–ù–µ–º–∞—î –ø–æ—Ç–æ—á–Ω–∏—Ö –∞—É–∫—Ü—ñ–æ–Ω—ñ–≤')
    except:
        pass
    if message.chat.id == 54778970:
        buttons.append('–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω')
    keyboard.add(*[types.KeyboardButton(auction) for auction in buttons])
    for auction in getAuctions():
        bot.send_message(message.chat.id, auction, reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞—É–∫—Ü—ñ–æ–Ω—ñ–≤')
def to_start(message):
    start(message)


@bot.message_handler(func=lambda message: message.text in getAuctions())
def choose_category(message):
    bot.send_message(message.chat.id, db.child('auctions').child(message.text).child('description').get().val())
    bot.send_message(message.chat.id, 'üïê –ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è ' + time.strftime('%d.%m.%y %H:%M', time.gmtime(db.child('auctions').child(message.text).child('date_of_end').get().val())))
    bot.send_message(message.chat.id, '–ù–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–±–æ—Ç–∏:')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    emoji = ['üî¥','üü†','üü°','üü¢','üîµ','üü£','‚ö´','‚ö™','Ô∏èüü§']
    i = 0
    works = ''
    for work in getWorks(message.text):
        markup.add(work)
        element = emoji[i] + ' ' + work
        works += element + '\n' + '\n'
        i += 1
        if i == 9:
            i = 0
    bot.send_message(message.chat.id, works)
    if message.chat.id == 54778970:
        markup.add('–î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É')
        markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω')
        markup.add('–ö–æ–Ω—Ç–∞–∫—Ç—É–≤–∞—Ç–∏ –∑ –ø–µ—Ä–µ–º–æ–∂—Ü—è–º–∏')
    markup.add('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞—É–∫—Ü—ñ–æ–Ω—ñ–≤')
    msg = bot.send_message(message.chat.id, '–Ø–∫–∞ —Ä–æ–±–æ—Ç–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?', reply_markup=markup)
    bot.register_next_step_handler(msg, trade_1, message.text)


def trade_1(message, auction):
    if message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞—É–∫—Ü—ñ–æ–Ω—ñ–≤':
        start(message)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω':
        finish_auction(message, auction)
    elif message.text == '–î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É':
        add_art_1(message, auction)
    elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—É–≤–∞—Ç–∏ –∑ –ø–µ—Ä–µ–º–æ–∂—Ü—è–º–∏':
        negotiate(message, auction)
    else:
        art = dict(db.child('auctions').child(auction).child('art').child(message.text).get().val())
        bot.send_message(message.chat.id, art['name'])
        bot.send_photo(message.chat.id, art['pic_url'])
        highest_bid = art['bids']['start_bid']
        highest_bidder_id = 0
        try:
            for bid in art['bids']:
                if int(art['bids'][bid]['value']) > int(highest_bid['value']):
                    highest_bid = art['bids'][bid]
                    highest_bidder_id = art['bids'][bid]['id']
        except Exception as e:
            print(e)
        bot.send_message(message.chat.id, 'üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞–≤–∫–∞ ' + str(highest_bid['value']) + ' –≥—Ä–Ω')
        if message.chat.id == highest_bidder_id:
            bot.send_message(message.chat.id, '–Ü —Ü–µ –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bt1 = types.KeyboardButton('üñê –ó—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫—É')
        markup.add(bt1)
        markup.add('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–±—ñ—Ç')
        msg = bot.send_message(message.chat.id,
                               '–ë–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫—É?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, make_bid, auction, art, highest_bid, highest_bidder_id)


def make_bid(message, auction, art, highest_bid, highest_bidder_id):
    if message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–±—ñ—Ç':
        message.text = auction
        choose_category(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–±—ñ—Ç')
        msg = bot.reply_to(message, '–ó–∞ —è–∫—É —Å—É–º—É –±–∞–∂–∞—î—Ç–µ –∫—É–ø–∏—Ç–∏ —Ü—é —Ä–æ–±–æ—Ç—É?', reply_markup=markup)
        bot.register_next_step_handler(msg, accept_bid, auction, art, highest_bid, highest_bidder_id)


def accept_bid(message, auction, art, highest_bid, highest_bidder_id):
    if message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–±—ñ—Ç':
        message.text = auction
        choose_category(message)
    else:
        try:
            if int(message.text) > int(highest_bid['value']):
                bot.send_message(message.chat.id, '‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞—É–∫—Ü—ñ–æ–Ω—É –º–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ '
                                                  '–≤–∞—Å –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏', reply_markup=types.ReplyKeyboardRemove())
                full_bid = {'id': message.chat.id, 'value': int(message.text)}
                db.child('auctions').child(auction).child('art').child(art['name']).child('bids').push(full_bid)
                print(highest_bidder_id)
                if highest_bidder_id != 0:
                    bot.send_message(highest_bidder_id, '‚ö°Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ ' + auction + ' –Ω–∞ —Ä–æ–±–æ—Ç—É ' + art['name'] + ' –±—É–ª–∞ –ø–µ—Ä–µ–±–∏—Ç–∞\n'
                                                        '–ù–æ–≤–∞ —Å—Ç–∞–≤–∫–∞ - ' + str(message.text) + ' –≥—Ä–Ω\n'
                                                        '–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –ø–æ–±–æ—Ä–æ—Ç–∏—Å—å –∑–∞ —Ü—é —Ä–æ–±–æ—Ç—É, –æ–Ω–æ–≤—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É!'
                                                        '–ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è ' + time.strftime('%d.%m.%y %H:%M', time.gmtime(db.child('auctions').child(auction).child('date_of_end').get().val())))
                    bot.send_message(54778970, '‚ùóÔ∏è –ó—Ä–æ–±–ª–µ–Ω–æ —Å—Ç–∞–≤–∫—É ' + auction + ' ' + art['name'] + ' ' + str(message.text) + ' ' + str(highest_bidder_id))
                time.sleep(2)
                start(message)
            else:
                bot.send_message(message.chat.id, '‚ùå –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –º–µ–Ω—à–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É',
                                 reply_markup=types.ReplyKeyboardRemove())
                make_bid(message, auction, art, highest_bid, highest_bidder_id)
        except Exception as e:
            print('Something wrong with your bet', e)
            bot.send_message(message.chat.id, '‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏')
            make_bid(message, auction, art, highest_bid, highest_bidder_id)


@bot.message_handler(func=lambda message: message.text == '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω')
def add_auction(message):
    msg = bot.reply_to(message, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞—É–∫—Ü—ñ–æ–Ω—É', reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, add_description)


def add_description(message):
    auction = {'name': message.text}
    msg = bot.reply_to(message, '–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –∞—É–∫—Ü—ñ–æ–Ω—É')
    bot.register_next_step_handler(msg, add_date, auction)


def add_date(message):
    auction = {'description': message.text}
    msg = bot.reply_to(message, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –∞—É–∫—Ü—ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY HH.MM')
    bot.register_next_step_handler(msg, add_date_end, auction)


def add_date_end(message, auction):
    try:
        time_split_1 = message.text.split(' ')
        time_split_date = time_split_1[0].split('.')
        time_split_time = time_split_1[1].split('.')
        d = datetime.datetime(int(time_split_date[2]), int(time_split_date[1]), int(time_split_date[0]), int(time_split_time[0]), int(time_split_time[1]), 0)
        unixtime = time.mktime(d.timetuple())
        auction['date_of_start'] = int(unixtime)

    except Exception as ex:
        bot.send_message(message.chat.id, '–Ø–∫–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞ –∑ –≤–≤–æ–¥–æ–º —á–∞—Å—É')
        print(ex)
        start(message)

    msg = bot.reply_to(message, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∫—ñ–Ω—Ü—è –∞—É–∫—Ü—ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY HH.MM')
    bot.register_next_step_handler(msg, add_art, auction)


def add_art(message, auction):
    try:
        time_split_1 = message.text.split(' ')
        time_split_date = time_split_1[0].split('.')
        time_split_time = time_split_1[1].split('.')
        d = datetime.datetime(int(time_split_date[2]), int(time_split_date[1]), int(time_split_date[0]),
                              int(time_split_time[0]), int(time_split_time[1]), 0)
        unixtime = time.mktime(d.timetuple())
        auction['date_of_end'] = int(unixtime)
    except Exception as ex:
        bot.send_message(message.chat.id, '–Ø–∫–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞ –∑ –≤–≤–æ–¥–æ–º —á–∞—Å—É')
        print(ex)
        start(message)
    try:
        db.child("auctions").child(auction['name']).set(auction)
    except Exception as ex:
        bot.send_message(message.chat.id, '–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–∫—Ü—ñ–æ–Ω—É')
        print(ex)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.chat.id, '–ó–∞—Ä–∞–∑ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–±–æ—Ç–∏:')
    try:
        auctionID = get_auction_by_name(auction['name'])
        for work in getWorks(auctionID):
            bot.send_message(message.chat.id, work)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bt1 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É')
        markup.add(bt1)
        markup.add('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞—É–∫—Ü—ñ–æ–Ω—ñ–≤')
        msg = bot.send_message(message.chat.id,
                               '–î–æ–¥–∞—Ç–∏?',
                               reply_markup=markup)
        bot.register_next_step_handler(msg, add_art_1, auctionID)

    except Exception as ex:
        bot.send_message(message.chat.id, '–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –∑ –ø–æ—à—É–∫–æ–º –∞—É–∫—Ü—ñ–æ–Ω—É')
        print(ex)


def add_art_1(message, auctionID):
    if message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞—É–∫—Ü—ñ–æ–Ω—ñ–≤':
        start(message)
    else:
        msg = bot.reply_to(message, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Ä–æ–±–æ—Ç–∏')
        bot.register_next_step_handler(msg, add_art_2, auctionID)


def add_art_2(message, auctionID):
    art = {'name': message.text}
    msg = bot.reply_to(message, '–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É —Ü—ñ–Ω—É –≤ –≥—Ä–∏–≤–Ω—è—Ö')
    bot.register_next_step_handler(msg, add_art_3, auctionID, art)


def add_art_3(message, auctionID, art):
    art['bids'] = {}
    art['bids']['start_bid'] = {}
    art['bids']['start_bid']['value'] = int(message.text)
    art['bids']['start_bid']['id'] = 0
    msg = bot.reply_to(message, '–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')
    bot.register_next_step_handler(msg, add_art_4, auctionID, art)


def add_art_4(message, auctionID, art):
    art['pic_url'] = message.text
    try:
        db.child('auctions').child(auctionID).child('art').child(art['name']).set(art)
    except Exception as ex:
        bot.send_message(message.chat.id, '–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏')
        print(ex)
    bot.send_message(message.chat.id, '–†–æ–±–æ—Ç—É –¥–æ–¥–∞–Ω–æ')
    bot.send_message(message.chat.id, art['name'])
    bot.send_message(message.chat.id, '–°—Ç–∞—Ä—Ç–æ–≤–∞ —Ü—ñ–Ω–∞: ' + int(art['bids']['start_bid']['value']))
    bot.send_photo(message.chat.id, art['pic_url'])
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É')
    markup.add(bt1)
    msg = bot.send_message(message.chat.id, '–î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É —Ä–æ–±–æ—Ç—É?', reply_markup=markup)
    bot.register_next_step_handler(msg, add_art_1, auctionID)


def negotiate(message, auction):
    works = ''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for work in getWorks(auction):
        markup.add(work)
        works += 'üéà ' + work + '\n'
        bids = dict(db.child('auctions').child(auction).child('art').child(work).child('bids').get().val())
        for bid in bids:
            if bid != 'start_bid':
                works += '‚ûñ ' + bid + '\n'
                works += '–°—Ç–∞–≤–∫–∞: ' + str(bids[bid]['value']) + '\n'
                works += 'ID: ' + str(bids[bid]['id']) + '\n'
                try:
                    if bids[bid]['result'] == '–í—ñ–¥–º–æ–≤–∞':
                        works += '‚ùå' + '–í—ñ–¥–º–æ–≤–∞\n'
                    if bids[bid]['result'] == '–ö—É–ø–ª–µ–Ω–æ':
                        works += '‚úÖ' + '–ö—É–ø–ª–µ–Ω–æ\n'
                    if bids[bid]['result'] == '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ':
                        works += '‚ùì' + '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ\n'
                except Exception as e:
                    pass
            works += '\n'
    markup.add('–ù–∞–∑–∞–¥')
    msg = bot.send_message(message.chat.id, works, reply_markup=markup)
    bot.register_next_step_handler(msg, negotiate_2, auction)


def negotiate_2(message, auction):
    if message.text == '–ù–∞–∑–∞–¥':
        start(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bids_message = ''
        art = message.text
        art_bids = dict(db.child('auctions').child(auction).child('art').child(message.text).child('bids').get().val())
        for bid in art_bids:
            if bid != 'start_bid':
                markup.add(bid)
                bids_message += '‚ûñ ' + bid + '\n'
                bids_message += '–°—Ç–∞–≤–∫–∞: ' + str(art_bids[bid]['value']) + '\n'
                bids_message += 'ID: ' + str(art_bids[bid]['id']) + '\n'
                try:
                    if art_bids[bid]['result'] == '–í—ñ–¥–º–æ–≤–∞':
                        bids_message += '‚ùå' + '–í—ñ–¥–º–æ–≤–∞\n'
                    if art_bids[bid]['result'] == '–ö—É–ø–ª–µ–Ω–æ':
                        bids_message += '‚úÖ' + '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ\n'
                    if art_bids[bid]['result'] == '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ':
                        bids_message += '‚ùì' + '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ\n'
                except Exception as e:
                    pass
        markup.add('–ù–∞–∑–∞–¥')
        if bids_message == '':
            msg = bot.send_message(message.chat.id, '–ù–µ–º–∞—î —Å—Ç–∞–≤–æ–∫', reply_markup=markup)
        else:
            msg = bot.send_message(message.chat.id, bids_message, reply_markup=markup)
        bot.register_next_step_handler(msg, negotiate_3, auction, art)

def negotiate_3(message, auction, art):
    if message.text == '–ù–∞–∑–∞–¥':
        negotiate(message, auction)
    else:
        bet = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è')
        markup.add('–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–Ω—è')
        markup.add('–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –∫—É–ø–ª–µ–Ω–µ')
        markup.add('–ù–∞–∑–∞–¥')
        winner_text = '–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: \n'
        winner_text += db.child('auctions').child(auction).child('winner_text').get().val()
        winner_text += '\n–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ –≤—ñ–¥–º–æ–≤—É –∞–±–æ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é —Ä–æ–±–æ—Ç–∏'
        msg = bot.send_message(message.chat.id, winner_text, reply_markup=markup)
        bot.register_next_step_handler(msg, negotiate_4, auction, art, bet)


def negotiate_4(message, auction, art, bet):
    if message.text == '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è':
        message_id = db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).child('id').get().val()
        bot.send_message(message_id,
                         db.child('auctions').child(auction).child('winner_text').get().val())
        bot.send_photo(message_id,
                       db.child('auctions').child(auction).child('art').child(art).child('pic_url').get().val())
        bot.send_message(message_id, db.child('auctions').child(auction).child('art').child(art).child('name').get().val())
        mess = '–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ' + str(db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).child('value').get().val()) + ' –≥—Ä–Ω\n' + '–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–≤\'—è–∂–µ—Ç–µ—Å—å –∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏, –≤–∞—à—É —Å—Ç–∞–≤–∫—É –±—É–¥–µ –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ'
        bot.send_message(message_id, mess)
        bot.send_message(message.chat.id, '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ')
        data = {'result': '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ',
                'id': db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).child(
                    'id').get().val(),
                'value': db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).child(
                    'value').get().val()}
        db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).set(data)
        negotiate(message, auction)
    if message.text == '–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–Ω—è':
        data = {'result': '–í—ñ–¥–º–æ–≤–∞',
                'id': db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).child('id').get().val(),
                'value': db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).child('value').get().val()}
        db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).set(data)
        bot.send_message(message.chat.id, '–ó—Ä–æ–±–ª–µ–Ω–æ')
        negotiate(message, auction)
    if message.text == '–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –∫—É–ø–ª–µ–Ω–µ':
        data = {'result': '–ö—É–ø–ª–µ–Ω–æ',
                'id': db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).child('id').get().val(),
                'value': db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).child('value').get().val()}
        db.child('auctions').child(auction).child('art').child(art).child('bids').child(bet).set(data)
        bot.send_message(message.chat.id, '–ó—Ä–æ–±–ª–µ–Ω–æ')
        negotiate(message, auction)
    if message.text == '–ù–∞–∑–∞–¥':
        negotiate(message, auction)


@bot.message_handler(func=lambda message: message.text)
def to_start(message):
    start(message)

@bot.message_handler(content_types=['sticker'])
def sticker(message):
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAALZ917FJNkYobdgo2LmDSaCE9eRX6kPAAKBYQAC4KOCB-bq_OmAUqhDGQQ')
    pass


bot.polling()
